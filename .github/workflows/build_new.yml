name: Build OpenSSL & cURL for Android

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  get_versions:
    runs-on: ubuntu-latest
    outputs:
      openssl_version: ${{ steps.extract.outputs.openssl_version }}
      curl_version: ${{ steps.extract.outputs.curl_version }}
    steps:
      - name: Extract versions
        id: extract
        run: |
          echo "openssl_version=3.3.2" >> $GITHUB_OUTPUT
          echo "curl_version=8.9.0" >> $GITHUB_OUTPUT

  Compile_OpenSSL_for_Android:
    name: OpenSSL ${{ matrix.ANDROID_TARGET_ABI }} (NDK ${{ matrix.ANDROID_NDK }})
    needs: get_versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ANDROID_TARGET_ABI: [armeabi-v7a, arm64-v8a, x86, x86_64, riscv64]
        ANDROID_NDK: [r24b, r25c, r26d, r27c]
        include:
          - ANDROID_TARGET_ABI: riscv64
            ANDROID_TARGET_API: "35"
          - ANDROID_TARGET_ABI: armeabi-v7a
            ANDROID_TARGET_API: "21"
          - ANDROID_TARGET_ABI: arm64-v8a
            ANDROID_TARGET_API: "21"
          - ANDROID_TARGET_ABI: x86
            ANDROID_TARGET_API: "21"
          - ANDROID_TARGET_ABI: x86_64
            ANDROID_TARGET_API: "21"
    env:
      OPENSSL_VERSION: ${{ needs.get_versions.outputs.openssl_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build OpenSSL
        run: |
          mkdir -p build/openssl
          echo "Fake build OpenSSL $OPENSSL_VERSION for ${{ matrix.ANDROID_TARGET_ABI }} NDK ${{ matrix.ANDROID_NDK }}" > build/openssl/README.txt

      - name: Package artifact
        run: |
          ART=OpenSSL_${OPENSSL_VERSION}_${{ matrix.ANDROID_TARGET_ABI }}_NDK-${{ matrix.ANDROID_NDK }}.tar.gz
          tar -C build/openssl -czf $ART .
          echo "ARTIFACT=$ART" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenSSL-${{ matrix.ANDROID_TARGET_ABI }}-NDK-${{ matrix.ANDROID_NDK }}
          path: ${{ env.ARTIFACT }}

  Compile_cURL_for_Android:
    name: cURL ${{ matrix.ANDROID_TARGET_ABI }} (NDK ${{ matrix.ANDROID_NDK }})
    needs: [get_versions, Compile_OpenSSL_for_Android]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ANDROID_TARGET_ABI: [armeabi-v7a, arm64-v8a, x86, x86_64, riscv64]
        ANDROID_NDK: [r24b, r25c, r26d, r27c]
        include:
          - ANDROID_TARGET_ABI: riscv64
            ANDROID_TARGET_API: "35"
          - ANDROID_TARGET_ABI: armeabi-v7a
            ANDROID_TARGET_API: "21"
          - ANDROID_TARGET_ABI: arm64-v8a
            ANDROID_TARGET_API: "21"
          - ANDROID_TARGET_ABI: x86
            ANDROID_TARGET_API: "21"
          - ANDROID_TARGET_ABI: x86_64
            ANDROID_TARGET_API: "21"
    env:
      CURL_VERSION: ${{ needs.get_versions.outputs.curl_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build cURL
        run: |
          mkdir -p build/curl
          echo "Fake build cURL $CURL_VERSION for ${{ matrix.ANDROID_TARGET_ABI }} NDK ${{ matrix.ANDROID_NDK }}" > build/curl/README.txt

      - name: Package artifact
        run: |
          ART=cURL_${CURL_VERSION}_${{ matrix.ANDROID_TARGET_ABI }}_NDK-${{ matrix.ANDROID_NDK }}.tar.gz
          tar -C build/curl -czf $ART .
          echo "ARTIFACT=$ART" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cURL-${{ matrix.ANDROID_TARGET_ABI }}-NDK-${{ matrix.ANDROID_NDK }}
          path: ${{ env.ARTIFACT }}

  Publish_Release:
    name: Publish Release
    needs: [get_versions, Compile_OpenSSL_for_Android, Compile_cURL_for_Android]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect & package final zip
        run: |
          mkdir -p Output
          OPENSSL_VERSION=${{ needs.get_versions.outputs.openssl_version }}
          CURL_VERSION=${{ needs.get_versions.outputs.curl_version }}

          for ABI in armeabi-v7a arm64-v8a x86 x86_64 riscv64; do
            for NDK in r24b r25c r26d r27c; do
              mkdir -p Output/NDK-$NDK/$ABI/openssl
              mkdir -p Output/NDK-$NDK/$ABI/curl

              OPENSSL_ART=$(find artifacts -name "OpenSSL_*_${ABI}_NDK-${NDK}.tar.gz" | head -n 1 || true)
              CURL_ART=$(find artifacts -name "cURL_*_${ABI}_NDK-${NDK}.tar.gz" | head -n 1 || true)

              if [[ -f "$OPENSSL_ART" ]]; then tar -xzf "$OPENSSL_ART" -C Output/NDK-$NDK/$ABI/openssl; fi
              if [[ -f "$CURL_ART" ]]; then tar -xzf "$CURL_ART" -C Output/NDK-$NDK/$ABI/curl; fi
            done
          done

          FINAL_NAME="OpenSSL-${OPENSSL_VERSION}_cURL-${CURL_VERSION}_NDKs-r24b-r25c-r26d-r27c.zip"
          cd Output && zip -r "../$FINAL_NAME" . && cd ..
          echo "FINAL_ZIP=$FINAL_NAME" >> $GITHUB_ENV

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-openssl${{ needs.get_versions.outputs.openssl_version }}-curl${{ needs.get_versions.outputs.curl_version }}
          name: "OpenSSL ${{ needs.get_versions.outputs.openssl_version }} & cURL ${{ needs.get_versions.outputs.curl_version }} Android Builds"
          files: ${{ env.FINAL_ZIP }}
